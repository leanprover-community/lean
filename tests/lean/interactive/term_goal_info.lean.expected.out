{"message":"file invalidated","response":"ok","seq_num":0}
{"record":{"full-id":"hpqr","state":"p q r : Prop,\nhp : p,\nhpqr : p ∧ q → r,\nhq : q\n⊢ r","type":"p ∧ q → r"},"response":"ok","seq_num":3}
{"record":{"doc":"If the current goal is a Pi/forall `∀ x : t, u` (resp. `let x := t in u`) then `intro` puts `x : t` (resp. `x := t`) in the local context. The new subgoal target is `u`.\n\nIf the goal is an arrow `t → u`, then it puts `h : t` in the local context and the new goal target is `u`.\n\nIf the goal is neither a Pi/forall nor begins with a let binder, the tactic `intro` applies the tactic `whnf` until an introduction can be applied or the goal is not head reducible. In the latter case, the tactic fails.","source":,"state":"p q r : Prop,\nhp : p,\nhpqr : p ∧ q → r\n⊢ q → r","tactic_params":["id?"],"text":"intro","type":"interactive.parse (optional interactive.types.ident_) → tactic unit"},"response":"ok","seq_num":7}
{"record":{"full-id":"and.intro","source":,"state":"p q r : Prop,\nhp : p,\nhpqr : p ∧ q → r,\nhq : q\n⊢ p ∧ q","type":"∀ {a b : Prop}, a → b → a ∧ b"},"response":"ok","seq_num":11}
{"record":{"state":"p q r : Prop,\nhp : p,\nhpqr : p ∧ q → r\n⊢ q → r"},"response":"ok","seq_num":15}
{"record":{"doc":"The `apply` tactic tries to match the current goal against the conclusion of the type of term. The argument term should be a term well-formed in the local context of the main goal. If it succeeds, then the tactic returns as many subgoals as the number of premises that have not been fixed by type inference or type class resolution. Non-dependent premises are added before dependent ones.\n\nThe `apply` tactic uses higher-order pattern matching, type class resolution, and first-order unification with dependent types.","source":,"state":"p q : Prop,\nhppq : p → p → q,\nhp : p\n⊢ q","tactic_param_idx":0,"tactic_params":["expr"],"text":"apply","type":"interactive.parse interactive.types.texpr → tactic unit"},"response":"ok","seq_num":19}
{"record":{"full-id":"h","state":"p : Prop\n⊢ Prop","type":"p"},"response":"ok","seq_num":22}
{"record":{"full-id":"and.intro","source":,"state":"p q : Prop,\na : p,\na_1 : q\n⊢ p ∧ q","type":"∀ {a b : Prop}, a → b → a ∧ b"},"response":"ok","seq_num":26}
