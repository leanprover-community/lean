((1 + (2 * 3)) + 4) : ℕ
nat.add_assoc : ∀ (n m k : ℕ), (((n + m) + k) = (n + (m + k)))
(([1, 2, 3]) ++ ([3, 4, 5])) : list ℕ
∀ (x y z : ℤ), ((x - (-3)) = ((-2) + x)) : Prop
ℤ → ℤ → {x // ((x - (-3)) = ((-2) + x))} : Type
∀ (p : ℕ → ℕ → Prop), p (1 + 2) 3 : Prop
∀ (f : ℕ → ℕ → ℕ), ((f 2 (f 3 4 + 1) + 2) = f 1 2) : Prop
(set.univ = (⋃ (n : ℕ), {m : ℕ | (m < n)})) : Prop
{x // (x ∈ set.univ)} : Type
