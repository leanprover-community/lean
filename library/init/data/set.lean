/-
Copyright (c) 2016 Microsoft Corporation. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Leonardo de Moura
-/
prelude
import init.meta.interactive
import init.control.lawful

universes u v
def set (Œ± : Type u) := Œ± ‚Üí Prop

def set_of {Œ± : Type u} (p : Œ± ‚Üí Prop) : set Œ± :=
p

namespace set
variables {Œ± : Type u} {Œ≤ : Type v}

protected def mem (a : Œ±) (s : set Œ±) :=
s a

instance : has_mem Œ± (set Œ±) :=
‚ü®set.mem‚ü©

protected def subset (s‚ÇÅ s‚ÇÇ : set Œ±) :=
‚àÄ ‚¶Éa‚¶Ñ, a ‚àà s‚ÇÅ ‚Üí a ‚àà s‚ÇÇ

instance : has_subset (set Œ±) :=
‚ü®set.subset‚ü©

protected def sep (p : Œ± ‚Üí Prop) (s : set Œ±) : set Œ± :=
{a | a ‚àà s ‚àß p a}

instance : has_sep Œ± (set Œ±) :=
‚ü®set.sep‚ü©

instance : has_emptyc (set Œ±) :=
‚ü®Œª a, false‚ü©

def univ : set Œ± :=
Œª a, true

protected def insert (a : Œ±) (s : set Œ±) : set Œ± :=
{b | b = a ‚à® b ‚àà s}

instance : has_insert Œ± (set Œ±) :=
‚ü®set.insert‚ü©

instance : has_singleton Œ± (set Œ±) := ‚ü®Œª a, {b | b = a}‚ü©

instance : is_lawful_singleton Œ± (set Œ±) :=
‚ü®Œª a, funext $ Œª b, propext $ or_false _‚ü©

protected def union (s‚ÇÅ s‚ÇÇ : set Œ±) : set Œ± :=
{a | a ‚àà s‚ÇÅ ‚à® a ‚àà s‚ÇÇ}

instance : has_union (set Œ±) :=
‚ü®set.union‚ü©

protected def inter (s‚ÇÅ s‚ÇÇ : set Œ±) : set Œ± :=
{a | a ‚àà s‚ÇÅ ‚àß a ‚àà s‚ÇÇ}

instance : has_inter (set Œ±) :=
‚ü®set.inter‚ü©

def compl (s : set Œ±) : set Œ± :=
{a | a ‚àâ s}

protected def diff (s t : set Œ±) : set Œ± :=
{a ‚àà s | a ‚àâ t}

instance : has_sdiff (set Œ±) :=
‚ü®set.diff‚ü©

def powerset (s : set Œ±) : set (set Œ±) :=
{t | t ‚äÜ s}
prefix `ùí´`:100 := powerset

@[reducible]
def sUnion (s : set (set Œ±)) : set Œ± := {t | ‚àÉ a ‚àà s, t ‚àà a}
prefix `‚ãÉ‚ÇÄ`:110 := sUnion

def image (f : Œ± ‚Üí Œ≤) (s : set Œ±) : set Œ≤ :=
{b | ‚àÉ a, a ‚àà s ‚àß f a = b}

instance : functor set :=
{ map := @set.image }

instance : is_lawful_functor set :=
{ id_map := Œª _ s, funext $ Œª b, propext ‚ü®Œª ‚ü®_, sb, rfl‚ü©, sb, Œª sb, ‚ü®_, sb, rfl‚ü©‚ü©,
  comp_map := Œª _ _ _ g h s, funext $ Œª c, propext
    ‚ü®Œª ‚ü®a, ‚ü®h‚ÇÅ, h‚ÇÇ‚ü©‚ü©, ‚ü®g a, ‚ü®‚ü®a, ‚ü®h‚ÇÅ, rfl‚ü©‚ü©, h‚ÇÇ‚ü©‚ü©,
     Œª ‚ü®b, ‚ü®‚ü®a, ‚ü®h‚ÇÅ, h‚ÇÇ‚ü©‚ü©, h‚ÇÉ‚ü©‚ü©, ‚ü®a, ‚ü®h‚ÇÅ, by dsimp; cc‚ü©‚ü©‚ü© }

end set
